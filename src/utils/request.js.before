import axios from 'axios'
import router from '@/router'
import { getToken } from '@/utils/auth'
import Config from '@/config'
import { Toast } from 'vant'
import Vue from 'vue'
Vue.use(Toast)
// 创建axios实例
const service = axios.create({
  baseURL: process.env.BASE_API, // api 的 base_url
  timeout: Config.timeout // 请求超时时间
})
// request拦截器
service.interceptors.request.use(
  config => {
    if (getToken()) {
      config.headers['Authorization'] = 'JWT ' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改
    }
    config.headers['Content-Type'] = 'application/json'
    console.log(config)
    let str = '?'
    for (let key in config.data) {
      str += key + '=' + config.data[key] + "&"
      console.log(str)
    }
    str = str.slice(0,-1)
    if (config.method == 'get') {
      config.url = config.baseURL + config.url+str
    }
    return config
  },
  error => {
    // Do something with request error
    console.log(error) // for debug
    Promise.reject(error)
  }
)

// response 拦截器
service.interceptors.response.use(
  response => {
    const code = response.status
    if (code < 200 || code > 300) {
      Notification.error({
        title: response.message
      })
      if(code == 401){
           this.$toast("登录已过期，请重新登录");
      }
      return Promise.reject('error')
    } else {
      return response.data
    }
  },
  error => {
    let code = 0
    try {
      code = error.response.data.status
    } catch (e) {
      if (error.toString().indexOf('Error: timeout') !== -1) {
        this.$toast('网络请求超时')
        return Promise.reject(error)
      }
    }
    if (code === 401) {
      this.$toast('登录状态已过期')
    } else if (code === 403) {
      router.push({ path: '/401' })
    } else {
      // loading.close();
      const errorMsg = error.response.data.message
      if (errorMsg !== undefined) {
        Notification.error({
          title: errorMsg,
          duration: 2500
        })
      }
    }
    return Promise.reject(error)
  }
)
export default service
